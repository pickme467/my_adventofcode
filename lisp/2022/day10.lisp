(defun cycles-to-register-value (input)
  (append
   '((1 1))
    (loop for i in input
          for x = (add-to-register i 1) then (add-to-register i x)
          for cycle = (increment-cycle i 1) then (increment-cycle i cycle)
          collect (list cycle x))))

(defun find-strength-for-cycle (input cycle)
  (loop for last-x = nil then x
        for (c x) in (cycles-to-register-value input)
        when (= c cycle)
          do (return x)
        when (> c cycle) do (return last-x)))

(defun find-strength (input intervals)
  (loop for i in intervals
        sum (* i (find-strength-for-cycle input i))))

(defun add-to-register (instruction register)
  (destructuring-bind (command &optional (value 0)) instruction
    (cond ((equal command 'noop) register)
          (t (+ register value)))))

(defun increment-cycle (instruction cycle)
  (+ cycle (if (> (length instruction) 1) 2 1)))

(defun draw-screen (input)
  (let ((registers (cycles-to-register-value input)))
    (loop for i from 1 to 240
          with register = (cadr (pop registers))
          with cycle = (caar registers)
          with output = (concatenate 'string "" (list #\Newline))
          when (equal i cycle)
            do (setq register (cadr (pop registers)))
               (setq cycle (caar registers))
          when (< (abs (- (1- (1+ (mod (1- i) 40))) register)) 2)
            do (setf output (concatenate 'string output "#"))
          else
            do (setf output (concatenate 'string output "."))
          when (= 0 (mod i 40))
            do (setf output (concatenate 'string output (list #\Newline)))
          finally (return output))))

(defun day10-part1 ()
  (assert (equal 11820 (find-strength (input) '(20 60 100 140 180 220)))))

(defun day10-part2 ()
  (let ((expected "
####.###....##.###..###..#..#..##..#..#.
#....#..#....#.#..#.#..#.#.#..#..#.#..#.
###..#..#....#.###..#..#.##...#..#.####.
#....###.....#.#..#.###..#.#..####.#..#.
#....#....#..#.#..#.#.#..#.#..#..#.#..#.
####.#.....##..###..#..#.#..#.#..#.#..#.
"))
   (assert (equal expected (draw-screen (input))))))

(defun input ()
  '(
    (addx 1)
    (noop)
    (addx 4)
    (noop)
    (noop)
    (addx 7)
    (noop)
    (noop)
    (noop)
    (addx 3)
    (noop)
    (noop)
    (addx 5)
    (addx -1)
    (addx 1)
    (addx 5)
    (addx 3)
    (noop)
    (addx 3)
    (noop)
    (addx -1)
    (noop)
    (addx 3)
    (addx 5)
    (addx -38)
    (addx 7)
    (addx 10)
    (addx -14)
    (addx 5)
    (addx 30)
    (addx -25)
    (noop)
    (addx 2)
    (addx 3)
    (addx -2)
    (addx 2)
    (addx 5)
    (addx 2)
    (addx 2)
    (addx -21)
    (addx 22)
    (addx 5)
    (addx 2)
    (addx 3)
    (noop)
    (addx -39)
    (addx 1)
    (noop)
    (noop)
    (addx 3)
    (addx 5)
    (addx 4)
    (addx -5)
    (addx 4)
    (addx 4)
    (noop)
    (addx -9)
    (addx 12)
    (addx 5)
    (addx 2)
    (addx -1)
    (addx 6)
    (addx -2)
    (noop)
    (addx 3)
    (addx 3)
    (addx 2)
    (addx -37)
    (addx 39)
    (addx -33)
    (addx -1)
    (addx 1)
    (addx 8)
    (noop)
    (noop)
    (noop)
    (addx 2)
    (addx 20)
    (addx -19)
    (addx 4)
    (noop)
    (noop)
    (noop)
    (addx 3)
    (addx 2)
    (addx 5)
    (noop)
    (addx 1)
    (addx 4)
    (addx -21)
    (addx 22)
    (addx -38)
    (noop)
    (noop)
    (addx 7)
    (addx 32)
    (addx -27)
    (noop)
    (addx 3)
    (addx -2)
    (addx 2)
    (addx 5)
    (addx 2)
    (addx 2)
    (addx 3)
    (addx -2)
    (addx 2)
    (noop)
    (addx 3)
    (addx 5)
    (addx 2)
    (addx 3)
    (noop)
    (addx -39)
    (addx 2)
    (noop)
    (addx 4)
    (addx 8)
    (addx -8)
    (addx 6)
    (addx -1)
    (noop)
    (addx 5)
    (noop)
    (noop)
    (noop)
    (addx 3)
    (addx 5)
    (addx 2)
    (addx -11)
    (addx 12)
    (addx 2)
    (noop)
    (addx 3)
    (addx 2)
    (addx 5)
    (addx -6)
    (noop)))
