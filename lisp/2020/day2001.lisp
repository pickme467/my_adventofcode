(defun day-20-2020-1 ()
  (reduce #'* (mapcar (lambda (s) (parse-integer (subseq (first s) 5) :junk-allowed t))
                      (mapcar #'first (remove-if (lambda (n) (> (length (second n)) 2))
                                                 (find-neighbours (first (parse-input (input)))))))))

(defun day-20-2020-2 ()
  (let* ((original-shape (make-grid-list (make-coord-grid (put-on-grid (parse-input (input))))))
         (total-hashes (length (shape-to-coords original-shape))))
    (loop for shape = original-shape then (flip-shape shape)
          for result = (loop for rotation from 0 to 3
                             for rotated-shape-coords = (shape-to-coords (rotate-shape-n shape rotation))
                             for monster-calculation = (length
                                                        (set-difference
                                                         rotated-shape-coords
                                                         (find-monsters rotated-shape-coords) :test #'equal))
                             when (< monster-calculation total-hashes)
                               return monster-calculation)
          when (< result total-hashes)
            return result)))

(defun put-on-grid (input)
  (let* ((rules (find-neighbours (first input)))
         (shapes (second input))
         (grid (make-hash-table :test #'equal))
         (first-tile-borders (first (first rules)))
         (first-tile-name (first first-tile-borders))
         (first-shapes (rest (assoc first-tile-name shapes :test #'equal))))
    (setf (gethash first-tile-name grid)
          (list '(0 0) first-tile-borders first-shapes))
    (loop repeat (floor (sqrt (length (first input))))
          do (loop for (base neighbours) in rules
                   unless (null (gethash (first base) grid))
                     do (loop for nbr in neighbours
                              do (put-neighbour-on-grid (first base) nbr grid input))))
    grid))

(defun shape-to-coords (shape)
  (loop for row in shape for y = 0 then (1+ y)
        append (loop for char across row for x = 0 then (1+ x)
                     when (equal char #\#) collect (list x y))))

(defun max-coord (shape)
  (loop for (x y) in shape maximize x into maxx maximize y into maxy
        finally (return (list maxx maxy))))

(defun shift-coords-by (coords by)
  (destructuring-bind (dx dy) by
    (loop for (x y) in coords collect (list (+ x dx) (+ y dy)))))

(defun find-monsters (coords)
  (let ((monster-coords (shape-to-coords (monster))))
    (destructuring-bind (maxx maxy) (max-coord coords)
      (loop for y from 0 to maxy
            append (loop for x from 0 to maxx
                         for monster = (shift-coords-by monster-coords (list x y))
                         for intersection = (intersection coords monster :test #'equal)
                         when (= (length monster) (length intersection))
                           append monster)))))

(defun get-coordinates-boundaries (grid)
  (loop for (x y) in (loop for i being the hash-value in grid collect (first i))
        minimize x into min-x maximize x into max-x
        minimize y into min-y maximize y into max-y
        finally (return (list min-x max-x min-y max-y))))

(defun make-coord-grid (grid)
  (destructuring-bind (min-x max-x min-y max-y) (get-coordinates-boundaries grid)
    (declare (ignore max-x max-y))
    (let ((coord-grid (make-hash-table :test #'equal)))
      (loop for ((x y) borders shape) being the hash-values in grid
            do (setf (gethash (list (- x min-x) (- y min-y)) coord-grid) (grid-no-borders shape))
            finally (return coord-grid)))))

(defun make-grid-list (grid)
  (destructuring-bind (min-x max-x min-y max-y) (get-print-boundaries grid)
    (let ((shapes-list(loop for y from min-y to max-y
                            collect (loop for x from min-x to max-x
                                          collect (gethash (list x y) grid)))))
      (loop for s in shapes-list
            append (apply #'mapcar (lambda (&rest r) (apply #'concatenate 'string r)) s)))))

(defun get-print-boundaries (grid)
  (loop for (x y) being the hash-keys in grid
        minimize x into min-x maximize x into max-x
        minimize y into min-y maximize y into max-y
        finally (return (list min-x max-x min-y max-y))))

(defun put-neighbour-on-grid (related-to whom-to-put grid input)
  (unless (null (gethash (first whom-to-put) grid)) (return-from put-neighbour-on-grid grid))
  (let* ((related-data (gethash related-to grid))
         (base-coordinates (first related-data))
         (related-borders (second related-data))
         (needs-flip (needs-flip whom-to-put related-borders))
         (correct (if needs-flip (flip whom-to-put) whom-to-put))
         (shape (rest (assoc (first whom-to-put) (second input) :test #'equal)))
         (correct-shape (if needs-flip (flip-shape shape) shape))
         (rotation-count (get-rotation correct related-borders))
         (correct-rotated (rotate-n correct rotation-count))
         (correct-rotated-shape (rotate-shape-n correct-shape rotation-count))
         (coordinates (get-coordinates base-coordinates correct-rotated related-borders)))
    (setf (gethash (first whom-to-put) grid) (list coordinates correct-rotated correct-rotated-shape))
    grid))

(defun needs-flip (what related-to)
  (intersection (second what) (second related-to) :test #'equal))

(defun flip (what)
  (let ((flipped-values (mapcar (lambda (l) (list (second l) (first l))) (second what))))
    (list (first what) (list (first flipped-values) (fourth flipped-values)
                             (third flipped-values) (second flipped-values)))))

(defun flip-shape (shape)
  (loop for i in shape
        collect (concatenate 'string (reverse (concatenate 'list i)))))

(defun grid-no-borders (grid)
  (rest (reverse (rest (reverse
                        (loop for i in grid
                              collect (concatenate 'string
                                                   (rest (reverse (rest (reverse
                                                                         (concatenate 'list i))))))))))))

(defun rotate-shape-n (what n) (rotate-fun-n what n #'rotate-once-shape))

(defun rotate-n (what n) (rotate-fun-n what n #'rotate-once))

(defun rotate-fun-n (what n fun)
  (if (equal 0 n) (return-from rotate-fun-n what))
  (loop repeat n
        for rotated = (funcall fun what) then (funcall fun rotated)
        finally (return rotated)))

(defun rotate-once (what)
  (let* ((copy (copy-list (second what)))
         (to-return (last copy))
         (to-cut (last copy 2)))
    (setf (cdr to-return) copy)
    (setf (cdr to-cut) nil)
    (append (list (first what)) (list to-return))))

(defun rotate-once-grid (what input)
  (let* ((shapes (second input))
         (shape (rest (assoc (first what) shapes :test #'equal))))
    (append (list (first what)) (rotate-once-shape shape))))

(defun rotate-once-shape (shape)
  (mapcar (lambda (s) (concatenate 'string s))
          (apply #'mapcar #'list
                 (reverse (mapcar (lambda (s) (concatenate 'list s)) shape)))))

(defun rotation-count (what-index related-to-index)
  (cond ((equal what-index related-to-index) 2)
        ((member (- related-to-index what-index) '(1 -3) :test #'equal) 3)
        ((member (- related-to-index what-index) '(-1 3) :test #'equal) 1)
        (t 0)))

(defun get-rotation(to-rotate base)
  (let* ((base-list (mapcar (lambda (x) (sort (copy-list x) #'<)) (second base)))
         (to-rotate-list (mapcar (lambda (x) (sort (copy-list x) #'<)) (second to-rotate)))
         (common (first (intersection base-list to-rotate-list :test #'equal))))
    (rotation-count (1+ (position common to-rotate-list :test #'equal))
                    (1+ (position common base-list :test #'equal)))))

(defun get-coordinates(base-coords to-whom base)
  (let* ((base-list (mapcar (lambda (x) (sort (copy-list x) #'<)) (second base)))
         (to-rotate-list (mapcar (lambda (x) (sort (copy-list x) #'<)) (second to-whom)))
         (common (first (intersection base-list to-rotate-list :test #'equal)))
         (base-edge-index (1+ (position common base-list :test #'equal))))
    (destructuring-bind (x y) base-coords
      (cond ((equal 1 base-edge-index) (list x (1- y)))
            ((equal 2 base-edge-index) (list (1+ x) y))
            ((equal 3 base-edge-index) (list x (1+ y)))
            (t (list (1- x) y))))))

(defun calculate-border (border)
  (loop for ch across border for
        multiplier = 1 then (* 2 multiplier)
        for divider = (expt 2 (1- (length border))) then (/ divider 2)
        when (equal #\# ch)
          sum multiplier into left
          and sum divider into right
        finally (return (list left right))))

(defun extract-border (tile)
  (let ((top (second tile))
        (bottom (concatenate 'string (reverse (concatenate 'list (first (reverse tile)))))))
    (destructuring-bind (left right) (loop for i in (rest tile)
                                           collect (subseq i 0 1) into rleft
                                           collect (subseq i (1- (length i))) into rright
                                           finally (return (list (apply #'concatenate 'string (reverse rleft))
                                                                 (apply #'concatenate 'string rright))))
      (list top right bottom left))))

(defun apply-border-calculation (element)
  (list (first element) (mapcar #'calculate-border (extract-border element))))

(defun parse-input (input)
  (loop for i in (uiop:split-string input :separator (string #\linefeed))
        with part = nil
        when (equal "" i)
          collect (reverse part) into output
          and do (setf part ())
        else
          do (push i part)
        finally (return (list (mapcar #'apply-border-calculation output) output))))

(defun find-neighbours (list)
  (sort (loop for tile in list
              collect (list tile (find-my-neighbours tile list)))
        (lambda (x y) (< (length (second x)) (length (second y))))))

(defun find-my-neighbours (tile tiles)
  (filter-me-out tile (loop for border in (second tile)
                            append (my-neighbour border tiles))))

(defun my-neighbour (border list)
  (loop for i in list
        for sorted-list = (mapcar (lambda (x) (sort (copy-list x) #'<)) (second i))
        when (member (sort (copy-list border) #'<) sorted-list :test #'equal)
          collect i))

(defun filter-me-out (me list)
  (remove-if (lambda (i) (equal (first me) (first i))) (remove-duplicates list :test #'equal)))

(defun input ()
  "Tile 2647:
#....#####
.##......#
##......##
.....#..#.
.........#
.....#..##
#.#....#..
#......#.#
#....##..#
...##.....

Tile 1283:
######..#.
#.#..#.#..
..#..#...#
.#.##..#..
#......#..
#.#....##.
.#.....#.#
#.#..#.#.#
.#......##
...##.....

Tile 3547:
#.#.#.###.
#.........
#....##...
#.....#..#
#.....#.#.
##..##...#
#...##....
......#..#
#...##....
.....###.#

Tile 1451:
##..#.#...
#.#.......
##.#.....#
....#.....
...#...##.
......#.#.
#...##.##.
........#.
.#.##.#...
..##..#...

Tile 3137:
....#.##.#
#....#...#
..#.#.....
...####..#
.#.###...#
.......#..
##.##.#..#
.#.##....#
#...#....#
..##.##..#

Tile 2897:
###..#.##.
..#......#
.....#....
###.#....#
#.#..#...#
.#...##..#
##..##.##.
#.....#..#
.#......##
#.#.#.##.#

Tile 1093:
..#.#.#.#.
#.#.......
..##....#.
.#.....#.#
#........#
.#....#..#
##....#..#
#.##..#..#
..###...##
.######.##

Tile 1217:
#..#....##
#.....#...
##...##..#
#.....#...
..#.#..#..
#..#....##
.##.#.....
......#...
.#........
.#..###.#.

Tile 2801:
###..##.#.
.........#
##.#...###
#......#..
#........#
......#...
##.####...
.....##...
..#..#.##.
...###.##.

Tile 1361:
...#.##..#
....#.....
###.......
#......#..
.......##.
#...#..#..
#.....##.#
##........
#.#.......
###.#..###

Tile 2063:
...#....##
##...#..##
#........#
........##
#.......##
#.........
##.....##.
.....##..#
.#.##.#...
.#..#####.

Tile 3797:
##..#...#.
.###.#.##.
.....#.##.
..#.......
...#.#....
........##
#.#.#.##.#
#.....#.##
#.......#.
.....#.##.

Tile 1289:
####.##.#.
.....#....
#..#.#....
####...#..
#.#..#..#.
.#.##..#..
#........#
....#..#..
........#.
###.#.####

Tile 1427:
##.##..##.
###..#.##.
#..##...#.
#..#.#...#
#........#
#...##....
#........#
.....#..#.
.####....#
##.#.##.#.

Tile 1951:
....##.#.#
.........#
#........#
.#..#...#.
.....#####
#......#.#
...##....#
......#...
..#...#..#
....####.#

Tile 1483:
....####..
.......#.#
###..#..##
...#.#...#
#..##...##
##.#......
#...#..#..
..#...#.##
.........#
.#...#....

Tile 1789:
##..#####.
....#....#
........#.
..#.#..#.#
..##.#..##
.........#
.........#
#..#.#..##
....##....
#.#.......

Tile 2129:
#.###.#..#
....##...#
.#..#..##.
...###.##.
..#..#...#
....##...#
#.........
#...#..###
#...#.....
...#....##

Tile 2137:
..#.####.#
##...#.#..
.......###
.#.....#.#
.#....##.#
#.......#.
#....#...#
#.....####
......##.#
..#####.##

Tile 3761:
.####.#...
####..#..#
#...##..##
.#.....#.#
....#....#
#.......#.
...#..#..#
#.##...##.
...###...#
...##.#..#

Tile 1327:
..####.#.#
#..#......
......#.##
#..##.....
..##.##..#
#.#.#.....
####.....#
..#.......
#.#...##..
#.##....#.

Tile 2741:
.#..#...#.
#....#..#.
......##.#
....#.#..#
........##
...#..#...
......##..
#...#..#.#
......##..
..#..#..#.

Tile 1699:
.###..####
##.....#.#
.....##.##
#.#...##..
.#........
.#....#..#
#..#....#.
.#...#...#
#.......#.
##.#..#..#

Tile 1151:
..#.##....
##....#...
###.#..#.#
#.......##
....#.#..#
#...###...
.#..#.#..#
#.#..##..#
.#.#.#.#..
.###..####

Tile 2273:
#.#.#.#.##
..........
#......#..
#.....#...
#.#...#...
##....##..
##..##.#..
#.#####.##
##.##...##
#...##..##

Tile 1999:
##.##...##
#......#..
##..#.....
#........#
#.#...####
..#....#.#
#..#...#..
.........#
#...##....
##.##.##..

Tile 1721:
....##...#
###.#....#
.##..#....
.#.#.#....
...##....#
##..#....#
#....#.###
#.....##..
....#...##
..#.#.#..#

Tile 2521:
..#######.
#.#..##.#.
.#....##.#
..#...####
.......##.
##...###..
...##....#
.##.#.....
###..##..#
####.##.#.

Tile 2111:
..#.#..#..
...#.....#
..####...#
.#.#..##.#
.##..#.##.
........##
........##
#..#.#....
...#.###..
.#.#...#..

Tile 2767:
.#######..
##.......#
#...#.##..
....#...##
#........#
..#.###...
....#..#.#
##....#.##
..##....##
.#####.#..

Tile 2141:
####.#....
#..#.#...#
...#..#..#
.......#..
.....###.#
#....#....
.......#.#
.#...#..##
...#......
.###.####.

Tile 2557:
.#.##..#..
..##.....#
#.#.#....#
..##...#..
...#..##.#
..........
##......##
#..#......
#.#..#...#
##.#####..

Tile 2269:
.#.#...##.
#.......##
#.....##..
##.#......
#.##..###.
.#.....##.
....#....#
....#...##
#..##.....
#.#.#.#.##

Tile 3511:
.#.#.##...
.#.....##.
.#....#..#
#.#......#
#.#.#.....
#........#
..#.......
.##.#.....
##.#.....#
..####..##

Tile 2789:
#......#..
#...#.....
#.........
.......#.#
...#....##
#.##..###.
#...##...#
.........#
.........#
.###..##..

Tile 2971:
#.##.#....
...#.....#
.#....#...
#.#..##...
#.....#...
####.....#
#..###..##
#....#....
#..#.##...
#.#..###..

Tile 3719:
#.###.....
...#.....#
...##...##
.#..#.#..#
#..#.#..#.
#.#..#..##
#...###..#
.#.#..#.##
........#.
#....###..

Tile 1901:
.#...##.##
#.........
.#.#.....#
#.##.....#
#........#
#....#...#
.....##.##
##.###..##
....#....#
....##..##

Tile 3191:
#.#..###.#
#...#..##.
#.....#...
.#.#.#....
.#..##....
#.....#.#.
.##.......
....#....#
#..##.#...
####....##

Tile 3709:
..#......#
#..#...#.#
#.##....#.
.#..#.##..
..#......#
#....##...
##........
....#....#
.........#
.#.#..###.

Tile 1613:
...##..##.
#......#..
..##.#..##
......##..
.#..#..##.
.......##.
.......#.#
...#.#....
#......#.#
###..#....

Tile 2441:
..#.######
#.#.......
#..#.#....
....#...##
#...#...##
#.##...#.#
........##
#.#...#...
#..####.##
#.##.####.

Tile 1409:
..####.#.#
..##....#.
..#.#...#.
..##.##...
.#.##....#
#.....##.#
####.....#
###....#..
####..#.#.
#..##.##.#

Tile 1523:
.#.##..##.
#..#.#....
##.#.#...#
....#.##.#
#........#
#.#.......
#...##...#
...#..##.#
#.##...#..
.####..#..

Tile 1367:
#..#...#.#
#.#.......
..#..#....
.###..###.
###..#.##.
##...#..#.
#..#...#.#
......##..
##.....#.#
.#####..##

Tile 1783:
...#.####.
.####..#..
#....#.###
#.#..#.#.#
#.#.#.#..#
#.......##
#.##.#.#..
.#.#....#.
#..#.#...#
.###..##.#

Tile 1871:
.##..#.##.
#........#
#...#....#
##.#..##..
##.....##.
#.....#.##
........##
....#....#
#.........
....#.#..#

Tile 3217:
#.#...#.##
.........#
.........#
#...#.....
#....#.#.#
.........#
...#.##.##
#...#.....
.#..#....#
#..###.#.#

Tile 3163:
...##.#.##
#.#......#
....#...##
#.......##
###..#.#..
.#....####
##....#.##
#.......#.
.....#..#.
.##.#.#.##

Tile 3271:
##.#.#.##.
##....##.#
#.#.##..##
#.#...##.#
.##......#
#.....#.#.
#........#
##..##....
#.#..##..#
#..#.####.

Tile 2707:
..###.#...
#...#.....
#.#..#....
#..##...##
.###......
.#..##...#
#...#.....
....#.....
#..#.#....
.##....#.#

Tile 3083:
##..#.#.##
#..#....##
.........#
..#.#...##
..#.......
.#.#.....#
..#..#.#..
#...#.#..#
#..#.#....
#.###..##.

Tile 1051:
####...##.
...#.#...#
..........
..#.......
#......#..
.#.##.##..
#....#.#.#
#..#.#...#
#.#..##..#
......###.

Tile 3767:
.#..##.###
...#.#....
..#.....#.
#.#.......
.#.....#.#
##..#....#
#...#..#.#
........##
#........#
..#....##.

Tile 2267:
.#..#..#..
.#.#.#....
.#......#.
#...#....#
.###..#...
.##.#...##
..#.##.##.
...#.#.##.
##.#.##..#
.#.##.....

Tile 1973:
#.#####..#
.#.......#
#..#.#..#.
#.#.#.#.#.
.##.......
#.#.....#.
.#.......#
#...##.#.#
##.......#
.##...####

Tile 3671:
#..##.#.##
....##...#
.###.##...
.........#
#..#.....#
..##...#..
......#...
..#..#..##
..#.......
##..###..#

Tile 3221:
#.#..###.#
#..#....##
#..#......
#...#...##
..#..#..#.
#..##...#.
...#....#.
.....#..#.
##..#..#..
.....#...#

Tile 1549:
.###.##..#
#.#.##...#
#....#....
..........
#.#......#
##.#.#..##
...#.#..##
........#.
#.#....###
#....#...#

Tile 3461:
.######..#
#.......##
.......#..
.#...#....
..##....#.
#.....##..
##.#.#..#.
.........#
##.##.#...
....#...##

Tile 2459:
..##.##.#.
...#..#...
.........#
#.#..#..##
#.###.#...
##.#......
.......#..
.........#
........##
#.##...#..

Tile 3203:
.#...####.
..##..#.#.
#..#..##..
#.#....##.
...#.#....
.......###
#.....##..
....#....#
#......#..
###.......

Tile 2203:
#.#..##.##
.......#..
......#.##
#.......##
#..##.##.#
..#.....##
#.##.....#
#.#....#..
.##.....##
......#...

Tile 3637:
#...###.#.
#.........
..#.......
...#.....#
#..##....#
#........#
.......#..
#....#.#..
#.#..##..#
..#.#..##.

Tile 2467:
..##.##...
##....####
...#.#.#.#
#.##...#.#
...##.##..
#.....#...
##........
..#...#.#.
#...####.#
#......###

Tile 2411:
...##....#
...##..###
...##.####
#.#..##.#.
..##.#.###
.#..#.###.
....####.#
.....##.#.
#.........
.#..#..###

Tile 2221:
####.....#
#.#.....##
.#....#...
.#.#......
.##..#..#.
....#.....
.........#
##.......#
#....#....
.##.######

Tile 1487:
..#..##...
.........#
#..#...###
....#...#.
.#...##.#.
.....#.#.#
.....##...
#.##......
#.#.......
#.#####.#.

Tile 1481:
#.###.##..
....##...#
....#.....
...#......
##.###.#.#
#.##..####
..#......#
.#....##.#
..##.##.#.
.#####.#.#

Tile 1669:
#...##.##.
...#..#...
.##..#.#.#
#..#..#..#
#......#.#
.#......##
........#.
......#..#
.##..#.#.#
##.##....#

Tile 3167:
.#.####...
.........#
#......##.
.....#....
..#.#...##
#.#.####.#
...#....#.
.........#
#...#.#..#
#.#.#.#.#.

Tile 3347:
###...##..
#.#......#
...#.....#
..........
#.#.....#.
..####..##
..#.#.#..#
##...#..#.
..##.....#
#..#....#.

Tile 2213:
#..#####.#
..........
#..#.##.#.
...###.#.#
......##..
......#..#
.##.....##
..#....###
...####..#
.####.#.##

Tile 3329:
..##...#..
#.#....#.#
#...#..#..
......#.##
#...####.#
..........
##....##.#
#......##.
....##...#
..####.##.

Tile 3851:
#.#....##.
.........#
#.....#...
##.##.....
...#.###..
#....##...
.....#.##.
.#........
#......#.#
...#..#..#

Tile 2659:
#.#...#.#.
.....#.##.
#..##.####
#.#.##....
#....#..#.
...#...#..
...#....#.
#....#.#..
.##.#....#
.....#..#.

Tile 1933:
.####.##..
#..####...
.#..####..
.#.#.##...
......#.#.
##........
.#.#.....#
#..#......
....#.....
...#...##.

Tile 3299:
###.##..#.
.......#..
...#...##.
###...#.##
......##..
....#.#..#
.###......
.#.#####..
#..#.#..#.
.....#.#.#

Tile 3691:
...###...#
#.........
#.#.....##
#.#....#..
#..#...#..
..........
##...##..#
.#...#...#
#.....#.##
.###..#...

Tile 3733:
#..#.#####
.....#....
....###..#
#..#.#....
#.#..#.###
..###...##
......#.##
...###....
...#....#.
..##......

Tile 2131:
##.#..#.#.
.#...#..##
#.......#.
....##...#
.###..#...
...#####..
.....#...#
##..#..##.
..##....#.
.#...####.

Tile 1723:
.....#####
.#.#..#...
##......#.
#.......##
.###...#..
#..#......
#.........
......#..#
.........#
.###.##.##

Tile 3463:
##.#....##
#....##..#
..#.#.....
#.#...#..#
#....#....
..#....#.#
#...#..###
##....#.##
..#.#.....
.#..#.##..

Tile 2549:
#.####.#..
...##....#
##..#.##.#
..###.#..#
#.#......#
#........#
....#.....
#......#.#
#....####.
...##.#.##

Tile 1031:
#..#.#.#.#
......##..
#........#
.###......
..#..#..#.
##....##..
......#...
...#...###
.###...#..
.##.#.###.

Tile 1979:
#.######..
.#.#.....#
#........#
#..##.....
##........
##.....#..
......#...
.........#
.#........
..#.#####.

Tile 2939:
#.#...#.##
.#..#....#
.#.....#.#
##......##
...#..##..
#....#.##.
#...##.#.#
..#...#...
##.....#..
.....##.#.

Tile 2381:
..##.###.#
..##...#..
.#...#....
#......#.#
##.......#
#..####...
...#.#.#.#
#.##.....#
..#......#
#..#.##...

Tile 3943:
#.#.###..#
.......###
#.#...###.
#..##.#..#
#......#..
#.##...#.#
#.........
##....##.#
....#.#...
.###.#....

Tile 1553:
#####.####
#...#.....
#.#.....#.
##......#.
#....#.#..
.#.....#.#
##....#.#.
#........#
.........#
.#.....##.

Tile 2351:
.###.###..
#.....#...
##.##....#
..#..##.#.
#.#.......
#....#....
......##.#
##...##..#
.#.....#..
.#.###..#.

Tile 2311:
#.#.#..##.
#..###.#..
...##..#.#
###.......
##........
#.#.......
..##.....#
.#.####...
..#.#.#...
###..##.#.

Tile 1567:
..###.#.##
.#.....###
#...#..##.
#.......#.
.......#..
#....#....
...#.##.#.
....#...##
....#....#
#.#...##..

Tile 2579:
#.##..##..
#......#..
#..#..#..#
##.......#
....##.#.#
#.####..#.
#..#..#.##
#...#..#.#
...##...#.
#..#.###..

Tile 3593:
.#.##.#.##
#...#....#
..........
##....#..#
##......##
#.........
......#..#
...#.....#
....#....#
##..###..#

Tile 2281:
##....###.
...#......
#......#.#
##.#..#..#
###.#..##.
.#...#...#
..........
.#.###.#..
#..#......
#..#.##.#.

Tile 1193:
.......###
##..#..#..
.###...###
....#.###.
..#...#..#
#.#....#..
...####..#
#....#..##
.#.......#
.#.#...##.

Tile 3833:
...#####..
#..####...
#.#....###
...##.#.##
..#...#..#
.##.#####.
#..#..#..#
#...##....
.....#.#..
.##.##.#.#

Tile 2003:
.#.###.#..
.........#
..#..#....
#.........
#..##....#
.......#.#
......#...
#....##..#
.#......##
..#..##.#.

Tile 2731:
#.#..#..##
....#..#.#
..#...#...
..#..#....
#.#..#...#
#....##...
#.........
#..##..#.#
#.........
.###.#....

Tile 3881:
..##......
#...#..#.#
##...#....
....#.....
##.......#
.....#####
...#....##
.........#
..........
#..##.####

Tile 3673:
##..###.#.
...##....#
###.....##
#..#...#.#
#.##......
..#.#.....
..#.#....#
.###.....#
.###.##...
###.#..#.#

Tile 1021:
#..###.#..
###..##.#.
#..##....#
.....###..
....##...#
....#.....
#.##..#..#
..........
.......#.#
..#.##..#.

Tile 2423:
#.....####
.##.#....#
.#........
##.....#..
#.....###.
#...#...#.
#...#..#.#
.#..#..##.
##.......#
.#####.###

Tile 3923:
..#....###
#.....#..#
#...#.#.#.
.#.......#
#..#.#....
.......#.#
##....##.#
.#..#...#.
#...##..#.
..#.#.#..#

Tile 2753:
..####..#.
#.......#.
#.##.#..##
#.#.#.....
#..#......
....#.#...
.#.#..#..#
#.....#..#
##.#..#...
#####....#

Tile 3929:
....#####.
##..#.##..
##.#.#.##.
##...#.#..
#........#
.##.#..#..
#..#.##...
##..#...#.
.....#...#
###..####.

Tile 3041:
.##.#..#.#
#..#...#..
###..#..#.
.#.#....##
...##.....
#....#..##
#........#
##.#...#..
##....#..#
...#..#..#

Tile 3433:
..#.#.#...
#.#.......
.....#....
..#......#
#..#.....#
........##
##..##.##.
##........
#.#.##..##
###.###..#

Tile 2719:
..##..#..#
#.##..##..
#......#..
#...##..##
..#..#.#.#
#......###
..###..#..
....#.#..#
....##...#
##..#..###

Tile 1201:
.#...##.##
#........#
##...##...
..........
.....#.#..
#.##.....#
...#.##..#
.........#
.#.#.....#
.##...#...

Tile 1129:
...####..#
......##..
#.....##..
#.......#.
#......#..
...##....#
........##
##.#.#.#..
...#..##.#
...##....#

Tile 3019:
..#...###.
.....#.##.
#.##.....#
.#.##..#..
.#..###..#
..#.####.#
#..#.#...#
.......#.#
#..##.#..#
#.##....##

Tile 1747:
##.###.#..
#.......#.
#...#..#.#
##...##.#.
..###.#..#
#..#..##..
#...#.....
..#.......
...#..#.#.
.##..##.##

Tile 1741:
.##.#..#.#
#...##..##
#....#.#.#
##...##..#
##.......#
#...#..##.
...#.##.##
...#..#.#.
.......#.#
.#####.###

Tile 1867:
#..##.....
.......###
#..##....#
##...#....
...###....
##..#.....
.##.......
#.....###.
#...#..#.#
...###....

Tile 2803:
.#.##....#
#.####..#.
#.........
#.#......#
.......#.#
........#.
..#..#.#.#
....###...
#...##....
...###....

Tile 3643:
#..#..#.##
####.#..#.
#.#...#.##
.#..#.....
##....#..#
.##.......
.......#.#
...##.#...
.....#.##.
#...####.#

Tile 2437:
..###..###
....#.....
..........
#.#..#.###
##...####.
....##....
...##.....
##..#.##..
#......#..
#.#.....#.

Tile 1069:
..####....
##..##...#
.#..#..##.
.#....##.#
###.#.#.##
...##..#.#
##....#...
#.#....#.#
.#.....#.#
#.#.#.....

Tile 1381:
.###.#.##.
....#..#..
#.......##
#...#.....
.#...#..##
...#....##
#..#.###..
..######.#
#....#...#
#######.#.

Tile 2617:
..##..#.#.
#.....##.#
..#.#..#..
.##.#..#..
###...#.#.
.###.##...
#.#.......
#..##.#..#
##.....#..
.##..#..##

Tile 2393:
.##..#.#.#
..#.#..###
..##..#.##
....#.....
#...#.....
##.#.....#
.#.#..#.#.
##.....#..
.......#.#
####..#...

Tile 3529:
#.#...##.#
......#..#
.........#
#.....#...
.......#..
.....#.#.#
.....#....
#....#.#.#
....#.##.#
.####.#..#

Tile 2953:
...##...#.
##.#.#..##
#...#.....
##.#...###
...#......
#.#.#..#.#
.#...#...#
##....#.##
.......#..
.#.#..#...

Tile 3617:
#..##...##
......#...
#....#....
..........
.######.##
##..#.#.##
#.#...#...
........#.
.######.##
##...###.#

Tile 3863:
.##.#...##
#...#.....
..#.#....#
#....#..##
.....###..
#.#......#
#.......#.
...#.....#
#.........
..###....#

Tile 3727:
#.###.##.#
..........
...##.....
..#..#..##
#......###
#....##...
###.##....
.....#....
##.####.#.
#..#.#.###

Tile 3803:
###..#.##.
.##......#
.........#
###.....##
....###..#
.......#.#
........##
#..#......
##......##
#.###..#..

Tile 1579:
#...##.###
.....#.###
.##...#...
#.#..#..#.
..##.....#
.........#
..........
#.....#.##
.....#....
.###..#...

Tile 1049:
#..#.##.##
##......##
..#.##...#
#.......#.
###.....#.
.....#.#.#
...#......
..##......
#.#....#..
##..#.#...

Tile 2687:
##..#.##..
.#........
##..#...#.
.#.#.....#
.#..#.#..#
#.###..#..
..#......#
#.......##
#..#.....#
#.##.#..##

Tile 1637:
#..##...##
##..#....#
...#....#.
#....#....
.....#...#
#...#...##
.#....#...
#.........
..#....#..
.#.####...

Tile 3527:
.#....#.#.
#.......#.
..#....#.#
####.#.#.#
...#..#...
###..#.###
##..#....#
#.##....##
..#......#
.....#.#..

Tile 2963:
#.#.#.#.#.
#.....#...
##.#.....#
..##......
..#.......
.#...#.##.
###......#
##....#..#
.#...#..##
..##..##.#

Tile 2287:
##.######.
.#.##.##..
#..#....##
##.#.#...#
.......##.
#...##...#
...##..#..
##....#.#.
....#.##..
..#.#..###

Tile 3677:
###.....##
#..#.#..#.
#.#.......
.....#..##
..........
......#.##
.....#..#.
#..#...#..
.##......#
#...##.##.

Tile 3559:
..#..#.##.
###......#
..#.##....
#.#..#....
##..##..##
..#...#.#.
#.....#.##
....#....#
...#.#...#
...#.###..

Tile 2837:
..#...#...
.....##...
#.#..#...#
....#....#
...####.##
#.........
...#...##.
.#..###.#.
....#.....
.###.##.#.

Tile 3539:
..##....#.
........#.
......#..#
...#..#...
###....###
#...#.....
.#........
#.....#...
..##.#..#.
..###..#.#

Tile 1667:
.#..####..
.....#....
......#...
#.#...##.#
#...#.#..#
##.#.#...#
##..#..#..
#...##...#
.#..###...
..#..####.

Tile 2791:
#.##.###.#
...#..#...
##.....###
...#.#..##
.........#
.###...#..
...#.....#
##.....##.
###.......
#..#.#....

Tile 2609:
..##.#....
##.#.#...#
#.#..#....
#.........
...#..#..#
#...#.#...
##.##....#
.###......
##.....##.
#.#...#.#.

Tile 3061:
####..#.##
#.....##..
..........
......#...
..#.#..###
.#.#..#..#
.#...#...#
#........#
.....#.#..
#..#....##
")

(defun example ()
  "Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...
")

(defun monster ()
  '("                  #"
    "#    ##    ##    ###"
    " #  #  #  #  #  #"))
